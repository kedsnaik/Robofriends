{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCNSC,EAVF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,yBAAKC,UAAY,8CACb,yBAAKC,IAAM,UAAUC,IAAG,+BAA4BL,KACpD,4BAAKC,GACL,2BAAIC,KCUDI,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BAEQA,EAAOC,KAAK,SAACC,EAAKC,GACd,OACA,kBAAC,EAAD,CAAMV,GAAMO,EAAOG,GAAGV,GAAIC,KAAQM,EAAOG,GAAGT,KAAMC,MAASK,EAAOG,GAAGR,aCM1ES,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BACIT,UAAY,mCACZU,KAAK,SACLC,YAAc,gBACdC,SAAYH,MCAbI,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAAEC,SAAU,SAASC,OAAQ,kBAAmBC,OAAO,UAChEJ,EAAMK,WCqCJC,G,kBAlCX,aAAc,IAAD,8BACT,+CAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAN1C,EAAKC,MAAQ,CACTvB,OAAS,GACToB,YAAc,IAJT,E,iFAUO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAS4B,S,+BAEnC,MACyBC,KAAKN,MAA3BvB,EADH,EACGA,OAAOoB,EADV,EACUA,YACRU,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASd,EAAYa,kBAEzD,OAAQjC,EAAOmC,OAIf,yBAAKvC,UAAY,MACb,wBAAIA,UAAY,cAAhB,eACA,kBAAC,EAAD,CAAWS,aAAgBwB,KAAKZ,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjB,OAAQ8B,MAPtB,2C,GAtBMM,cCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.879532d2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id,name,email}) => {\n    return (\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2'>\n            <img alt = \"robopic\" src = {`https://robohash.org/${id}`} />\n            <h1>{name}</h1>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n    return (\n        <div>\n            {\n                robots.map( (user,i)=> {\n                    return (\n                    <Card id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchchange}) => {\n    return (\n        <div>\n            <input \n                className = \"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder = \"Search robots\"\n                onChange = {searchchange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style = {{ overflow: 'scroll',border: '5px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    )\n}\nexport default Scroll","import React, {Component} from 'react';\n// import {robots} from './robots';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport \"./App.css\";\n\nclass App extends Component{\n    constructor(){\n        super();\n        this.state = {\n            robots : [],\n            searchfield : ''\n        }\n    }\n    onSearchChange = (event) => {\n        this.setState({searchfield : event.target.value});\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots : users}));\n    }\n    render(){ // render() is a lifecycle method which is invoked whenever the component needs to update.\n        const {robots,searchfield} = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ? \n            <h1>Loading</h1>\n        :\n        // This is actually the output. This is what actually rendered.\n        <div className = 'tc'>  \n            <h1 className = \"f1 styling\">RoboFriends</h1>\n            <SearchBox searchchange = {this.onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots} />\n            </Scroll>\n        </div>\n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}